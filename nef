#!/usr/bin/env python3
import sys
try:
    import future
except Exception as e:
    pass

MINIMUM_VERSION = (3, 7)
if not sys.version_info >= MINIMUM_VERSION:
    print("Error; minimum version required id %i.%i [and python 2 is not supported]" %MINIMUM_VERSION, file=sys.stderr)
    print("exiting...", file=sys.stderr)

import traceback
from textwrap import dedent

# for pynmrstar to avoid WARNING:root:Loop with no data on line: xx
import logging
logging.getLogger().setLevel(logging.ERROR)

EXIT_ERROR = 1


def do_exit_error(msg, trace_back=True, exit_code=EXIT_ERROR):
    msg = dedent(msg)
    if trace_back:
        traceback.print_exc()
    print(msg, file=sys.stderr)
    print('exiting...', file=sys.stderr)
    sys.exit(exit_code)


try:
    import typer
    from click import ClickException

except Exception as e:

    msg = '''\
             
             Initializaion error: one of the core libraries [friendly_tracback/typer] if missing from you environment
             please make sure they are installed an try again
             exiting...'''
    do_exit_error(msg)

try:
    import nef_app
    nef_app.app = typer.Typer()
    app = nef_app.app

except Exception as e:
    msg = '''\

             Initialisation error: failed to start the typer app, message the developer
             exiting...'''
    do_exit_error(msg)

try:
    # import components which will self register, this could and will be automated
    import transcoders.nmrview
    import transcoders.nmrpipe
    import tools.header
    import tools.test
    import tools.frames
    import tools.chains
    import tools.stream
    import transcoders.pales
    import transcoders.pdb
    import transcoders.fasta
    import transcoders.mars

except Exception as e:
    msg = '''\

         Initialisation error: failed to load a plugin, remove the plugin or contact the developer
         '''

    do_exit_error(msg)

try:

    nef_app.app

    command = typer.main.get_command(nef_app.app)

    command(standalone_mode=False)

except ClickException as e:
    e.show()
    do_exit_error(f"inputs: {' '.join(sys.argv[1:])}", trace_back=False, exit_code=e.exit_code)

except Exception as e:

    msg = f'''\

          Runtime error: failed to process the data using the plugin and commands, check you inputs or report a bug
          inputs: {' '.join(sys.argv[1:])}
          message: {e}
          '''

    do_exit_error(msg)
